Use stream operations to express sophisticated data processing queries.
First, typical processing patterns on collections
Second, how can we process really large collections efficiently? Ideally, to speed up the processing, you want to leverage multicore architectures. However, writing parallel code is hard and error-prone.
Java SE 8 to the rescue! The Java API designers are updating the API with a new abstraction called Stream that lets you process data in a declarative way. Furthermore, streams can leverage multi-core architectures without you having to write a single line of multithread code. Sounds good, doesn’t it? That’s what this series of articles will explore.


Stream.reduce()-- reduction stream operations allow us to produce one single result from a sequence of elements, by repeatedly applying a combining operation to the elements in the sequence.

Before we look deeper into using the Stream.reduce() operation, let's break down the operation's participant elements into separate blocks. That way, we'll understand more easily the role that each one plays.

Identity – an element that is the initial value of the reduction operation and the default result if the stream is empty
Accumulator – a function that takes two parameters: a partial result of the reduction operation and the next element of the stream
Combiner – a function used to combine the partial result of the reduction operation when the reduction is parallelized or when there's a mismatch between the types of the accumulator arguments and the types of the accumulator implementation

When a stream executes in parallel, the Java runtime splits the stream into multiple substreams. In such cases, we need to use a function to combine the results of the substreams into a single one. This is the role of the combiner.

----------------
Serialization
----------------
Serialization :- is a process of writing objects from memory into a stream.
De-serialization :- is a process of reading objects from the stream. Data is serailized in a binary form.
This mechanism is used to persist/save the object.
The byte stream created is platform independent. So, the object serialized on one platform can be deserialized on a different platform.

To make a Java object serializable we implement the java.io.Serializable interface.
The ObjectOutputStream class contains writeObject() method for serializing an Object.

The ObjectInputStream class contains readObject() method for deserializing an object.

Serializable ID:- The sender and receiver must have the same SerialVersionUID, otherwise, InvalidClassException will be thrown when you deserialize the object.

Java Serialization with Inheritance (IS-A Relationship)
If a class implements Serializable interface then all its sub classes will also be serializable.

Java Serialization with Aggregation (HAS-A Relationship)
If a class has a reference to another class, all the references must be Serializable otherwise serialization process will not be performed. In such case, NotSerializableException is thrown at runtime.

All the objects within an object must be Serializable.

Java Serialization with the static data member
If there is any static data member in a class, it will not be serialized because static is the part of class not object.

Java Serialization with array or collection
Rule: In case of array or collection, all the objects of array or collection must be serializable. If any object is not serialiizable, serialization will be failed.

Externalizable in java
The Externalizable interface provides the facility of writing the state of an object into a byte stream in compress format. It is not a marker interface.

Java Transient Keyword
If you don't want to serialize any data member of a class, you can mark it as transient.

Serializable is a marker interface (has no data member and method). It is used to "mark" Java classes so that the objects of these classes may get a certain capability. The Cloneable and Remote are also marker interfaces.

Advantages of Java Serialization
It is mainly used to travel object's state on the network (that is known as marshalling).

References
https://www.oracle.com/technical-resources/articles/java/ma14-java-se-8-streams.html
https://www.baeldung.com/java-stream-reduce
https://www.geeksforgeeks.org/serialization-in-java/
